##################### KALMAN CREATE PHASE ######################
Kalmanfilter->statePre [predicted]: 
[0;
 0;
 0;
 0;
 0;
 0]
Kalmanfilter->statePost [corrected]: 
[0;
 0;
 0;
 0;
 0;
 0]
Kalmanfilter->transitionMatrix [A]: 
[1, 0, 0, 0, 0, 0;
 0, 1, 0, 0, 0, 0;
 0, 0, 1, 0, 0, 0;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
Kalmanfilter->processNoiseCov [Q]: 
[1, 0, 0, 0, 0, 0;
 0, 1, 0, 0, 0, 0;
 0, 0, 1, 0, 0, 0;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
Kalmanfilter->measurementMatrix [H]: 
[0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0]
Kalmanfilter->measurementNoiseCov [R]: 
[1, 0, 0;
 0, 1, 0;
 0, 0, 1]
Kalmanfilter->errorCovPre [priori P]: 
[0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0]
Kalmanfilter->errorCovPost [posteriori P]: 
[0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0]
Kalmanfilter->gain [K]: 
[0, 0, 0;
 0, 0, 0;
 0, 0, 0;
 0, 0, 0;
 0, 0, 0;
 0, 0, 0]
Kalmanfilter->controlMatrix [B]: 
[0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0]
Kalmanfilter->controlvector [u]: 
[0;
 0;
 0;
 0;
 0;
 0]
##################### KALMAN INIT PHASE ######################
Kalmanfilter->transitionMatrix [A]: 
[1, 0, 0, 0, 0, 0;
 0, 1, 0, 0, 0, 0;
 0, 0, 1, 0, 0, 0;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
Kalmanfilter->measurementMatrix [H]: 
[1, 0, 0, 0, 0, 0;
 0, 1, 0, 0, 0, 0;
 0, 0, 1, 0, 0, 0]
Kalmanfilter->processNoiseCov [Q]: 
[0.0099999998, 0, 0, 0, 0, 0;
 0, 0.0099999998, 0, 0, 0, 0;
 0, 0, 0.0099999998, 0, 0, 0;
 0, 0, 0, 0.0099999998, 0, 0;
 0, 0, 0, 0, 0.0099999998, 0;
 0, 0, 0, 0, 0, 0.0099999998]
Kalmanfilter->measurementNoiseCov [R]: 
[0.0099999998, 0, 0;
 0, 0.0099999998, 0;
 0, 0, 0.0099999998]
Kalmanfilter->gain [K]: 
[1, 0, 0;
 0, 1, 0;
 0, 0, 1;
 0, 0, 0;
 0, 0, 0;
 0, 0, 0]
Kalmanfilter->controllvector [u]: 
[-9.8070002;
 -9.8070002;
 -9.8070002;
 -9.8070002;
 -9.8070002;
 -9.8070002]
Home Pose loaded
PID Values loaded
**INFO** Thread 
**INFO** Kamerapipeline wurde gestartet140733503751936 alive!
Timestamp ms1.60391e+12
Robot preparing in World 
Timestamp ms8368
Timestamp ms697
Timestamp ms26
Timestamp ms153
Timestamp ms29
Timestamp ms2282
Timestamp ms10
***ERROR*** Position out of bounds detected. X = 1578; Y = 816
Timestamp ms447
Timestamp ms8
Timestamp ms9
Timestamp ms2001
Timestamp ms18
Timestamp ms14
Timestamp ms12
Timestamp ms23
Timestamp ms13
Timestamp ms17
##################### KALMAN INIT FIRST POSITION PHASE ######################
Kalmanfilter->measurement 
[1.4071896;
 -0.41437763;
 -0.018631242]
Kalmanfilter->transitionMatrix [A] at 0.017: 
[1, 0, 0, 0.017000001, 0, 0;
 0, 1, 0, 0, 0.017000001, 0;
 0, 0, 1, 0, 0, 0.017000001;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
Kalmanfilter->controlMatrix [B] at 0.017: 
[0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0.00014450001, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0.017000001, 0, 0, 0, 0, 0]
##################### KALMAN PREDICT PHASE ######################
statePre = transitionMatrix*statePost [x'(k) = A*x(k)]
transitionMatrix: 
[1, 0, 0, 0.017000001, 0, 0;
 0, 1, 0, 0, 0.017000001, 0;
 0, 0, 1, 0, 0, 0.017000001;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
statePost: 
[1.4071896;
 -0.41437763;
 -0.018631242;
 0;
 0;
 1.4012985e-45]
statePre: 
[1.4071896;
 -0.41437763;
 -0.018631242;
 0;
 0;
 1.4012985e-45]
controlMatrix_temp = controlMatrix*control [B*u(k)]
controlMatrix: 
[0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0.00014450001, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0.017000001, 0, 0, 0, 0, 0]
control: 
[-9.8070002;
 -9.8070002;
 -9.8070002;
 -9.8070002;
 -9.8070002;
 -9.8070002]
controlMatrix_temp: 
[0;
 0;
 -0.0014171116;
 0;
 0;
 -0.166719]
statePre = statePre + controlMatrix_temp [x'(k) = x'(k) + controlMatrix_temp]
statePre: 
[1.4071896;
 -0.41437763;
 -0.018631242;
 0;
 0;
 1.4012985e-45]
statePre + controllMatrix_temp: 
[1.4071896;
 -0.41437763;
 -0.020048354;
 0;
 0;
 -0.166719]
update error covariance matrices: temp1 = A*P(k) [temp1 = transitionMatrix*errorCovPost]
transitionMatrix: 
[1, 0, 0, 0.017000001, 0, 0;
 0, 1, 0, 0, 0.017000001, 0;
 0, 0, 1, 0, 0, 0.017000001;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
errorCovPost: 
[0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0]
temp1: 
[0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0]
P'(k) = temp1*At + Q
temp1: 
[0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0]
transitionMatrix: 
[1, 0, 0, 0.017000001, 0, 0;
 0, 1, 0, 0, 0.017000001, 0;
 0, 0, 1, 0, 0, 0.017000001;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
processNoiseCov: 
[0.0099999998, 0, 0, 0, 0, 0;
 0, 0.0099999998, 0, 0, 0, 0;
 0, 0, 0.0099999998, 0, 0, 0;
 0, 0, 0, 0.0099999998, 0, 0;
 0, 0, 0, 0, 0.0099999998, 0;
 0, 0, 0, 0, 0, 0.0099999998]
errorCovPre: 
[0.0099999998, 0, 0, 0, 0, 0;
 0, 0.0099999998, 0, 0, 0, 0;
 0, 0, 0.0099999998, 0, 0, 0;
 0, 0, 0, 0.0099999998, 0, 0;
 0, 0, 0, 0, 0.0099999998, 0;
 0, 0, 0, 0, 0, 0.0099999998]
##################### KALMAN CORRECT PHASE ######################
temp2 = H*P'(k)
measurementMatrix: 
[1, 0, 0, 0, 0, 0;
 0, 1, 0, 0, 0, 0;
 0, 0, 1, 0, 0, 0]
errorCovPre: 
[0.0099999998, 0, 0, 0, 0, 0;
 0, 0.0099999998, 0, 0, 0, 0;
 0, 0, 0.0099999998, 0, 0, 0;
 0, 0, 0, 0.0099999998, 0, 0;
 0, 0, 0, 0, 0.0099999998, 0;
 0, 0, 0, 0, 0, 0.0099999998]
temp2: 
[0.0099999998, 0, 0, 0, 0, 0;
 0, 0.0099999998, 0, 0, 0, 0;
 0, 0, 0.0099999998, 0, 0, 0]
temp3 = temp2*Ht + R
temp2: 
[0.0099999998, 0, 0, 0, 0, 0;
 0, 0.0099999998, 0, 0, 0, 0;
 0, 0, 0.0099999998, 0, 0, 0]
measurementMatrix: 
[1, 0, 0, 0, 0, 0;
 0, 1, 0, 0, 0, 0;
 0, 0, 1, 0, 0, 0]
measurementNoiseCov: 
[0.0099999998, 0, 0;
 0, 0.0099999998, 0;
 0, 0, 0.0099999998]
temp3: 
[0.02, 0, 0;
 0, 0.02, 0;
 0, 0, 0.02]
temp4 = inv(temp3)*temp2 = Kt(k)
cputemp3: 
[0.02, 0, 0;
 0, 0.02, 0;
 0, 0, 0.02]
cputemp2: 
[0.0099999998, 0, 0, 0, 0, 0;
 0, 0.0099999998, 0, 0, 0, 0;
 0, 0, 0.0099999998, 0, 0, 0]
cputemp4: 
[0.5, 0, 0, 0, 0, 0;
 0, 0.5, 0, 0, 0, 0;
 0, 0, 0.5, 0, 0, 0]
gain = temp4.t()
gain: 
[0.5, 0, 0;
 0, 0.5, 0;
 0, 0, 0.5;
 0, 0, 0;
 0, 0, 0;
 0, 0, 0]
measurementMatrix_temp = measurementMatrix*statePre [measurementMatrix_temp = H*x'(k)]
measurementMatrix: 
[1, 0, 0, 0, 0, 0;
 0, 1, 0, 0, 0, 0;
 0, 0, 1, 0, 0, 0]
statePre: 
[1.4071896;
 -0.41437763;
 -0.020048354;
 0;
 0;
 -0.166719]
measurementMatrix_temp: 
[1.4071896;
 -0.41437763;
 -0.020048354]
temp5 = measurement - measurementMatrix_temp [temp5 = z(k) - measurementMatrix_temp]
measurement: 
[1.4071896;
 -0.41437763;
 -0.018631242]
temp5: 
[0;
 0;
 0.0014171116]
gain_temp = gain*temp5 [gain_temp = K(k)*temp5]
gain: 
[0.5, 0, 0;
 0, 0.5, 0;
 0, 0, 0.5;
 0, 0, 0;
 0, 0, 0;
 0, 0, 0]
temp5: 
[0;
 0;
 0.0014171116]
gain_temp: 
[0;
 0;
 0.0007085558;
 0;
 0;
 0]
statePost = statePre + gain_temp [x(k) = x'(k) + gain_temp]
statePre: 
[1.4071896;
 -0.41437763;
 -0.020048354;
 0;
 0;
 -0.166719]
statePost: 
[1.4071896;
 -0.41437763;
 -0.019339798;
 0;
 0;
 -0.166719]
gain_temp =  K(k)*temp2 [gain_temp = K(k)*temp2]
gain: 
[0.5, 0, 0;
 0, 0.5, 0;
 0, 0, 0.5;
 0, 0, 0;
 0, 0, 0;
 0, 0, 0]
temp2: 
[0.0099999998, 0, 0, 0, 0, 0;
 0, 0.0099999998, 0, 0, 0, 0;
 0, 0, 0.0099999998, 0, 0, 0]
gain_temp: 
[0.0049999999, 0, 0, 0, 0, 0;
 0, 0.0049999999, 0, 0, 0, 0;
 0, 0, 0.0049999999, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0]
errorCovPost = errorCovPre - gain_temp [P(k) = P'(k) - gain_temp]
errorCovPre: 
[0.0099999998, 0, 0, 0, 0, 0;
 0, 0.0099999998, 0, 0, 0, 0;
 0, 0, 0.0099999998, 0, 0, 0;
 0, 0, 0, 0.0099999998, 0, 0;
 0, 0, 0, 0, 0.0099999998, 0;
 0, 0, 0, 0, 0, 0.0099999998]
errorCovPost: 
[0.0049999999, 0, 0, 0, 0, 0;
 0, 0.0049999999, 0, 0, 0, 0;
 0, 0, 0.0049999999, 0, 0, 0;
 0, 0, 0, 0.0099999998, 0, 0;
 0, 0, 0, 0, 0.0099999998, 0;
 0, 0, 0, 0, 0, 0.0099999998]
Kalmanfilter->Prediction at 0.017: 
[1.4071896;
 -0.41437763;
 -0.019339798;
 0;
 0;
 -0.166719]
Timestamp ms197
Kalmanfilter->measurement 
[1.0011914;
 -0.0023208698;
 0.083832994]
Kalmanfilter->transitionMatrix [A] at 0.197: 
[1, 0, 0, 0.197, 0, 0;
 0, 1, 0, 0, 0.197, 0;
 0, 0, 1, 0, 0, 0.197;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
Kalmanfilter->controlMatrix [B] at 0.197: 
[0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0.019404499, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0.197, 0, 0, 0, 0, 0]
##################### KALMAN PREDICT PHASE ######################
statePre = transitionMatrix*statePost [x'(k) = A*x(k)]
transitionMatrix: 
[1, 0, 0, 0.197, 0, 0;
 0, 1, 0, 0, 0.197, 0;
 0, 0, 1, 0, 0, 0.197;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
statePost: 
[1.4071896;
 -0.41437763;
 -0.019339798;
 0;
 0;
 -0.166719]
statePre: 
[1.4071896;
 -0.41437763;
 -0.052183442;
 0;
 0;
 -0.166719]
controlMatrix_temp = controlMatrix*control [B*u(k)]
controlMatrix: 
[0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0.019404499, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0.197, 0, 0, 0, 0, 0]
control: 
[-9.8070002;
 -9.8070002;
 -9.8070002;
 -9.8070002;
 -9.8070002;
 -9.8070002]
controlMatrix_temp: 
[0;
 0;
 -0.19029993;
 0;
 0;
 -1.9319791]
statePre = statePre + controlMatrix_temp [x'(k) = x'(k) + controlMatrix_temp]
statePre: 
[1.4071896;
 -0.41437763;
 -0.052183442;
 0;
 0;
 -0.166719]
statePre + controllMatrix_temp: 
[1.4071896;
 -0.41437763;
 -0.24248338;
 0;
 0;
 -2.0986981]
update error covariance matrices: temp1 = A*P(k) [temp1 = transitionMatrix*errorCovPost]
transitionMatrix: 
[1, 0, 0, 0.197, 0, 0;
 0, 1, 0, 0, 0.197, 0;
 0, 0, 1, 0, 0, 0.197;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
errorCovPost: 
[0.0049999999, 0, 0, 0, 0, 0;
 0, 0.0049999999, 0, 0, 0, 0;
 0, 0, 0.0049999999, 0, 0, 0;
 0, 0, 0, 0.0099999998, 0, 0;
 0, 0, 0, 0, 0.0099999998, 0;
 0, 0, 0, 0, 0, 0.0099999998]
temp1: 
[0.0049999999, 0, 0, 0, 0, 0;
 0, 0.0049999999, 0, 0, 0, 0;
 0, 0, 0.0049999999, 0, 0, 0;
 0, 0, 0, 0.0099999998, 0, 0;
 0, 0, 0, 0, 0.0099999998, 0;
 0, 0, 0, 0, 0, 0.0099999998]
P'(k) = temp1*At + Q
temp1: 
[0.0049999999, 0, 0, 0, 0, 0;
 0, 0.0049999999, 0, 0, 0, 0;
 0, 0, 0.0049999999, 0, 0, 0;
 0, 0, 0, 0.0099999998, 0, 0;
 0, 0, 0, 0, 0.0099999998, 0;
 0, 0, 0, 0, 0, 0.0099999998]
transitionMatrix: 
[1, 0, 0, 0.197, 0, 0;
 0, 1, 0, 0, 0.197, 0;
 0, 0, 1, 0, 0, 0.197;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
processNoiseCov: 
[0.0099999998, 0, 0, 0, 0, 0;
 0, 0.0099999998, 0, 0, 0, 0;
 0, 0, 0.0099999998, 0, 0, 0;
 0, 0, 0, 0.0099999998, 0, 0;
 0, 0, 0, 0, 0.0099999998, 0;
 0, 0, 0, 0, 0, 0.0099999998]
errorCovPre: 
[0.015, 0, 0, 0, 0, 0;
 0, 0.015, 0, 0, 0, 0;
 0, 0, 0.015, 0, 0, 0;
 0.0019699999, 0, 0, 0.02, 0, 0;
 0, 0.0019699999, 0, 0, 0.02, 0;
 0, 0, 0.0019699999, 0, 0, 0.02]
##################### KALMAN CORRECT PHASE ######################
temp2 = H*P'(k)
measurementMatrix: 
[1, 0, 0, 0, 0, 0;
 0, 1, 0, 0, 0, 0;
 0, 0, 1, 0, 0, 0]
errorCovPre: 
[0.015, 0, 0, 0, 0, 0;
 0, 0.015, 0, 0, 0, 0;
 0, 0, 0.015, 0, 0, 0;
 0.0019699999, 0, 0, 0.02, 0, 0;
 0, 0.0019699999, 0, 0, 0.02, 0;
 0, 0, 0.0019699999, 0, 0, 0.02]
temp2: 
[0.015, 0, 0, 0, 0, 0;
 0, 0.015, 0, 0, 0, 0;
 0, 0, 0.015, 0, 0, 0]
temp3 = temp2*Ht + R
temp2: 
[0.015, 0, 0, 0, 0, 0;
 0, 0.015, 0, 0, 0, 0;
 0, 0, 0.015, 0, 0, 0]
measurementMatrix: 
[1, 0, 0, 0, 0, 0;
 0, 1, 0, 0, 0, 0;
 0, 0, 1, 0, 0, 0]
measurementNoiseCov: 
[0.0099999998, 0, 0;
 0, 0.0099999998, 0;
 0, 0, 0.0099999998]
temp3: 
[0.024999999, 0, 0;
 0, 0.024999999, 0;
 0, 0, 0.024999999]
temp4 = inv(temp3)*temp2 = Kt(k)
cputemp3: 
[0.024999999, 0, 0;
 0, 0.024999999, 0;
 0, 0, 0.024999999]
cputemp2: 
[0.015, 0, 0, 0, 0, 0;
 0, 0.015, 0, 0, 0, 0;
 0, 0, 0.015, 0, 0, 0]
cputemp4: 
[0.60000002, 0, 0, 0, 0, 0;
 0, 0.60000002, 0, 0, 0, 0;
 0, 0, 0.60000002, 0, 0, 0]
gain = temp4.t()
gain: 
[0.60000002, 0, 0;
 0, 0.60000002, 0;
 0, 0, 0.60000002;
 0, 0, 0;
 0, 0, 0;
 0, 0, 0]
measurementMatrix_temp = measurementMatrix*statePre [measurementMatrix_temp = H*x'(k)]
measurementMatrix: 
[1, 0, 0, 0, 0, 0;
 0, 1, 0, 0, 0, 0;
 0, 0, 1, 0, 0, 0]
statePre: 
[1.4071896;
 -0.41437763;
 -0.24248338;
 0;
 0;
 -2.0986981]
measurementMatrix_temp: 
[1.4071896;
 -0.41437763;
 -0.24248338]
temp5 = measurement - measurementMatrix_temp [temp5 = z(k) - measurementMatrix_temp]
measurement: 
[1.0011914;
 -0.0023208698;
 0.083832994]
temp5: 
[-0.40599823;
 0.41205677;
 0.32631636]
gain_temp = gain*temp5 [gain_temp = K(k)*temp5]
gain: 
[0.60000002, 0, 0;
 0, 0.60000002, 0;
 0, 0, 0.60000002;
 0, 0, 0;
 0, 0, 0;
 0, 0, 0]
temp5: 
[-0.40599823;
 0.41205677;
 0.32631636]
gain_temp: 
[-0.24359895;
 0.24723408;
 0.19578983;
 0;
 0;
 0]
statePost = statePre + gain_temp [x(k) = x'(k) + gain_temp]
statePre: 
[1.4071896;
 -0.41437763;
 -0.24248338;
 0;
 0;
 -2.0986981]
statePost: 
[1.1635907;
 -0.16714355;
 -0.046693549;
 0;
 0;
 -2.0986981]
gain_temp =  K(k)*temp2 [gain_temp = K(k)*temp2]
gain: 
[0.60000002, 0, 0;
 0, 0.60000002, 0;
 0, 0, 0.60000002;
 0, 0, 0;
 0, 0, 0;
 0, 0, 0]
temp2: 
[0.015, 0, 0, 0, 0, 0;
 0, 0.015, 0, 0, 0, 0;
 0, 0, 0.015, 0, 0, 0]
gain_temp: 
[0.0090000005, 0, 0, 0, 0, 0;
 0, 0.0090000005, 0, 0, 0, 0;
 0, 0, 0.0090000005, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0]
errorCovPost = errorCovPre - gain_temp [P(k) = P'(k) - gain_temp]
errorCovPre: 
[0.015, 0, 0, 0, 0, 0;
 0, 0.015, 0, 0, 0, 0;
 0, 0, 0.015, 0, 0, 0;
 0.0019699999, 0, 0, 0.02, 0, 0;
 0, 0.0019699999, 0, 0, 0.02, 0;
 0, 0, 0.0019699999, 0, 0, 0.02]
errorCovPost: 
[0.0059999991, 0, 0, 0, 0, 0;
 0, 0.0059999991, 0, 0, 0, 0;
 0, 0, 0.0059999991, 0, 0, 0;
 0.0019699999, 0, 0, 0.02, 0, 0;
 0, 0.0019699999, 0, 0, 0.02, 0;
 0, 0, 0.0019699999, 0, 0, 0.02]
Kalmanfilter->Prediction at 0.197: 
[1.1635907;
 -0.16714355;
 -0.046693549;
 0;
 0;
 -2.0986981]
Timestamp ms13
Kalmanfilter->measurement 
[0.99623197;
 -0.0050739688;
 0.076671109]
Kalmanfilter->transitionMatrix [A] at 0.013: 
[1, 0, 0, 0.013, 0, 0;
 0, 1, 0, 0, 0.013, 0;
 0, 0, 1, 0, 0, 0.013;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
Kalmanfilter->controlMatrix [B] at 0.013: 
[0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 8.4500003e-05, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0.013, 0, 0, 0, 0, 0]
##################### KALMAN PREDICT PHASE ######################
statePre = transitionMatrix*statePost [x'(k) = A*x(k)]
transitionMatrix: 
[1, 0, 0, 0.013, 0, 0;
 0, 1, 0, 0, 0.013, 0;
 0, 0, 1, 0, 0, 0.013;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
statePost: 
[1.1635907;
 -0.16714355;
 -0.046693549;
 0;
 0;
 -2.0986981]
statePre: 
[1.1635907;
 -0.16714355;
 -0.073976621;
 0;
 0;
 -2.0986981]
controlMatrix_temp = controlMatrix*control [B*u(k)]
controlMatrix: 
[0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 8.4500003e-05, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0.013, 0, 0, 0, 0, 0]
control: 
[-9.8070002;
 -9.8070002;
 -9.8070002;
 -9.8070002;
 -9.8070002;
 -9.8070002]
controlMatrix_temp: 
[0;
 0;
 -0.00082869153;
 0;
 0;
 -0.127491]
statePre = statePre + controlMatrix_temp [x'(k) = x'(k) + controlMatrix_temp]
statePre: 
[1.1635907;
 -0.16714355;
 -0.073976621;
 0;
 0;
 -2.0986981]
statePre + controllMatrix_temp: 
[1.1635907;
 -0.16714355;
 -0.074805312;
 0;
 0;
 -2.2261891]
update error covariance matrices: temp1 = A*P(k) [temp1 = transitionMatrix*errorCovPost]
transitionMatrix: 
[1, 0, 0, 0.013, 0, 0;
 0, 1, 0, 0, 0.013, 0;
 0, 0, 1, 0, 0, 0.013;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
errorCovPost: 
[0.0059999991, 0, 0, 0, 0, 0;
 0, 0.0059999991, 0, 0, 0, 0;
 0, 0, 0.0059999991, 0, 0, 0;
 0.0019699999, 0, 0, 0.02, 0, 0;
 0, 0.0019699999, 0, 0, 0.02, 0;
 0, 0, 0.0019699999, 0, 0, 0.02]
temp1: 
[0.0059999991, 0, 0, 0, 0, 0;
 0, 0.0059999991, 0, 0, 0, 0;
 0, 0, 0.0059999991, 0, 0, 0;
 0, 0, 0, 0.02, 0, 0;
 0, 0, 0, 0, 0.02, 0;
 0, 0, 0, 0, 0, 0.02]
P'(k) = temp1*At + Q
temp1: 
[0.0059999991, 0, 0, 0, 0, 0;
 0, 0.0059999991, 0, 0, 0, 0;
 0, 0, 0.0059999991, 0, 0, 0;
 0, 0, 0, 0.02, 0, 0;
 0, 0, 0, 0, 0.02, 0;
 0, 0, 0, 0, 0, 0.02]
transitionMatrix: 
[1, 0, 0, 0.013, 0, 0;
 0, 1, 0, 0, 0.013, 0;
 0, 0, 1, 0, 0, 0.013;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
processNoiseCov: 
[0.0099999998, 0, 0, 0, 0, 0;
 0, 0.0099999998, 0, 0, 0, 0;
 0, 0, 0.0099999998, 0, 0, 0;
 0, 0, 0, 0.0099999998, 0, 0;
 0, 0, 0, 0, 0.0099999998, 0;
 0, 0, 0, 0, 0, 0.0099999998]
errorCovPre: 
[0.015999999, 0, 0, 0, 0, 0;
 0, 0.015999999, 0, 0, 0, 0;
 0, 0, 0.015999999, 0, 0, 0;
 0.00026, 0, 0, 0.029999999, 0, 0;
 0, 0.00026, 0, 0, 0.029999999, 0;
 0, 0, 0.00026, 0, 0, 0.029999999]
##################### KALMAN CORRECT PHASE ######################
temp2 = H*P'(k)
measurementMatrix: 
[1, 0, 0, 0, 0, 0;
 0, 1, 0, 0, 0, 0;
 0, 0, 1, 0, 0, 0]
errorCovPre: 
[0.015999999, 0, 0, 0, 0, 0;
 0, 0.015999999, 0, 0, 0, 0;
 0, 0, 0.015999999, 0, 0, 0;
 0.00026, 0, 0, 0.029999999, 0, 0;
 0, 0.00026, 0, 0, 0.029999999, 0;
 0, 0, 0.00026, 0, 0, 0.029999999]
temp2: 
[0.015999999, 0, 0, 0, 0, 0;
 0, 0.015999999, 0, 0, 0, 0;
 0, 0, 0.015999999, 0, 0, 0]
temp3 = temp2*Ht + R
temp2: 
[0.015999999, 0, 0, 0, 0, 0;
 0, 0.015999999, 0, 0, 0, 0;
 0, 0, 0.015999999, 0, 0, 0]
measurementMatrix: 
[1, 0, 0, 0, 0, 0;
 0, 1, 0, 0, 0, 0;
 0, 0, 1, 0, 0, 0]
measurementNoiseCov: 
[0.0099999998, 0, 0;
 0, 0.0099999998, 0;
 0, 0, 0.0099999998]
temp3: 
[0.025999999, 0, 0;
 0, 0.025999999, 0;
 0, 0, 0.025999999]
temp4 = inv(temp3)*temp2 = Kt(k)
cputemp3: 
[0.025999999, 0, 0;
 0, 0.025999999, 0;
 0, 0, 0.025999999]
cputemp2: 
[0.015999999, 0, 0, 0, 0, 0;
 0, 0.015999999, 0, 0, 0, 0;
 0, 0, 0.015999999, 0, 0, 0]
cputemp4: 
[0.61538458, 0, 0, 0, 0, 0;
 0, 0.61538458, 0, 0, 0, 0;
 0, 0, 0.61538458, 0, 0, 0]
gain = temp4.t()
gain: 
[0.61538458, 0, 0;
 0, 0.61538458, 0;
 0, 0, 0.61538458;
 0, 0, 0;
 0, 0, 0;
 0, 0, 0]
measurementMatrix_temp = measurementMatrix*statePre [measurementMatrix_temp = H*x'(k)]
measurementMatrix: 
[1, 0, 0, 0, 0, 0;
 0, 1, 0, 0, 0, 0;
 0, 0, 1, 0, 0, 0]
statePre: 
[1.1635907;
 -0.16714355;
 -0.074805312;
 0;
 0;
 -2.2261891]
measurementMatrix_temp: 
[1.1635907;
 -0.16714355;
 -0.074805312]
temp5 = measurement - measurementMatrix_temp [temp5 = z(k) - measurementMatrix_temp]
measurement: 
[0.99623197;
 -0.0050739688;
 0.076671109]
temp5: 
[-0.1673587;
 0.16206959;
 0.15147641]
gain_temp = gain*temp5 [gain_temp = K(k)*temp5]
gain: 
[0.61538458, 0, 0;
 0, 0.61538458, 0;
 0, 0, 0.61538458;
 0, 0, 0;
 0, 0, 0;
 0, 0, 0]
temp5: 
[-0.1673587;
 0.16206959;
 0.15147641]
gain_temp: 
[-0.10298996;
 0.099735126;
 0.093216248;
 0;
 0;
 0]
statePost = statePre + gain_temp [x(k) = x'(k) + gain_temp]
statePre: 
[1.1635907;
 -0.16714355;
 -0.074805312;
 0;
 0;
 -2.2261891]
statePost: 
[1.0606008;
 -0.067408428;
 0.018410936;
 0;
 0;
 -2.2261891]
gain_temp =  K(k)*temp2 [gain_temp = K(k)*temp2]
gain: 
[0.61538458, 0, 0;
 0, 0.61538458, 0;
 0, 0, 0.61538458;
 0, 0, 0;
 0, 0, 0;
 0, 0, 0]
temp2: 
[0.015999999, 0, 0, 0, 0, 0;
 0, 0.015999999, 0, 0, 0, 0;
 0, 0, 0.015999999, 0, 0, 0]
gain_temp: 
[0.0098461527, 0, 0, 0, 0, 0;
 0, 0.0098461527, 0, 0, 0, 0;
 0, 0, 0.0098461527, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0]
errorCovPost = errorCovPre - gain_temp [P(k) = P'(k) - gain_temp]
errorCovPre: 
[0.015999999, 0, 0, 0, 0, 0;
 0, 0.015999999, 0, 0, 0, 0;
 0, 0, 0.015999999, 0, 0, 0;
 0.00026, 0, 0, 0.029999999, 0, 0;
 0, 0.00026, 0, 0, 0.029999999, 0;
 0, 0, 0.00026, 0, 0, 0.029999999]
errorCovPost: 
[0.0061538462, 0, 0, 0, 0, 0;
 0, 0.0061538462, 0, 0, 0, 0;
 0, 0, 0.0061538462, 0, 0, 0;
 0.00026, 0, 0, 0.029999999, 0, 0;
 0, 0.00026, 0, 0, 0.029999999, 0;
 0, 0, 0.00026, 0, 0, 0.029999999]
Kalmanfilter->Prediction at 0.013: 
[1.0606008;
 -0.067408428;
 0.018410936;
 0;
 0;
 -2.2261891]
Timestamp ms30
Kalmanfilter->measurement 
[0.98189884;
 -0.0067230645;
 0.072337002]
Kalmanfilter->transitionMatrix [A] at 0.03: 
[1, 0, 0, 0.029999999, 0, 0;
 0, 1, 0, 0, 0.029999999, 0;
 0, 0, 1, 0, 0, 0.029999999;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
Kalmanfilter->controlMatrix [B] at 0.03: 
[0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0.00044999999, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0, 0, 0, 0, 0, 0;
 0.029999999, 0, 0, 0, 0, 0]
##################### KALMAN PREDICT PHASE ######################
statePre = transitionMatrix*statePost [x'(k) = A*x(k)]
transitionMatrix: 
[1, 0, 0, 0.029999999, 0, 0;
 0, 1, 0, 0, 0.029999999, 0;
 0, 0, 1, 0, 0, 0.029999999;
 0, 0, 0, 1, 0, 0;
 0, 0, 0, 0, 1, 0;
 0, 0, 0, 0, 0, 1]
statePost: 
[1.0606008;
 -0.067408428;
 0.018410936;
 0;
 0;
 -2.2261891]

The inferior stopped because it received a signal from the operating system.

Signal name : 
SIGSEGV
Signal meaning : 
Segmentation fault
